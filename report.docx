**Professional Django Blog App - Documentation and Report**

---

## 📅 Project Overview

This Django blog project is a fully functional blogging application designed with a professional layout using Bootstrap. It allows users to:
- View a list of published blog posts
- Read full content for each post on a dedicated page
- Admins can create, edit, or delete posts from the Django admin panel

---

## 👨‍💼 Technologies Used

- **Backend:** Django (Python Framework)
- **Frontend:** HTML, Bootstrap (via CDN)
- **Database:** SQLite (default for Django)

---

## 📒 Project Structure

```
blog_project/
├── blog_project/        # Django project settings
│   ├── settings.py
│   ├── urls.py
├── blog/                 # Blog app
│   ├── models.py     # BlogPost model
│   ├── views.py      # Views logic
│   ├── urls.py       # Blog-specific URLs
│   ├── templates/
│       └── blog/
│           ├── base.html
│           ├── blog_home.html
│           └── blog_detail.html
```

---

## 🔄 Step-by-Step Guide

### Step 1: Project Initialization
```bash
pip install django
django-admin startproject blog_project
cd blog_project
python manage.py startapp blog
python manage.py migrate
python manage.py runserver
```

### Step 2: Create the BlogPost Model
**blog/models.py**
```python
from django.db import models
from django.utils.text import slugify

STATUS = (
    ('draft', 'Draft'),
    ('published', 'Published'),
)

class BlogPost(models.Model):
    title = models.CharField(max_length=200)
    slug = models.SlugField(unique=True)
    content = models.TextField()
    author = models.CharField(max_length=100)
    created = models.DateTimeField(auto_now_add=True)
    status = models.CharField(max_length=10, choices=STATUS, default='draft')

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.title)
        super().save(*args, **kwargs)

    def __str__(self):
        return self.title
```

### Step 3: Register Model in Admin
**blog/admin.py**
```python
from django.contrib import admin
from .models import BlogPost

admin.site.register(BlogPost)
```

### Step 4: Create Views
**blog/views.py**
```python
from django.shortcuts import render, get_object_or_404
from .models import BlogPost

def blog_home(request):
    posts = BlogPost.objects.filter(status='published').order_by('-created')
    return render(request, 'blog/blog_home.html', {'posts': posts})

def blog_detail(request, slug):
    post = get_object_or_404(BlogPost, slug=slug, status='published')
    return render(request, 'blog/blog_detail.html', {'post': post})
```

### Step 5: Define URLs
**blog/urls.py**
```python
from django.urls import path
from . import views

urlpatterns = [
    path('', views.blog_home, name='blog_home'),
    path('post/<slug:slug>/', views.blog_detail, name='blog_detail'),
]
```

**blog_project/urls.py**
```python
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('blog.urls')),
]
```

---

## 🌟 Templates

### base.html
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>{% block title %}My Blog{% endblock %}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body class="bg-light">
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark mb-4">
        <div class="container">
            <a class="navbar-brand" href="/">My Blog</a>
        </div>
    </nav>

    <div class="container">
        {% block content %}{% endblock %}
    </div>

    <footer class="bg-dark text-white text-center py-3 mt-4">
        <small>&copy; 2025 My Blog</small>
    </footer>
</body>
</html>
```

### blog_home.html
```html
{% extends 'blog/base.html' %}
{% block title %}Home - My Blog{% endblock %}
{% block content %}
    <h1 class="mb-4">Latest Posts</h1>
    {% for post in posts %}
        <div class="card mb-4">
            <div class="card-body">
                <h3 class="card-title">
                    <a href="{% url 'blog_detail' slug=post.slug %}" class="text-dark">{{ post.title }}</a>
                </h3>
                <p class="card-subtitle mb-2 text-muted">By {{ post.author }} | {{ post.created|date:"F d, Y" }}</p>
                <p class="card-text">{{ post.content|truncatechars:200 }}</p>
                <a href="{% url 'blog_detail' slug=post.slug %}" class="btn btn-primary">Read More</a>
            </div>
        </div>
    {% empty %}
        <p>No posts available.</p>
    {% endfor %}
{% endblock %}
```

### blog_detail.html
```html
{% extends 'blog/base.html' %}
{% block title %}{{ post.title }} - My Blog{% endblock %}
{% block content %}
    <div class="mb-3">
        <a href="/" class="btn btn-outline-secondary">&larr; Back to Blog</a>
    </div>
    <div class="card">
        <div class="card-body">
            <h1 class="card-title">{{ post.title }}</h1>
            <p class="text-muted">By {{ post.author }} | {{ post.created|date:"F d, Y" }}</p>
            <hr>
            <div class="card-text">{{ post.content|linebreaks }}</div>
        </div>
    </div>
{% endblock %}
```

---

## 🔄 Future Enhancements

- Add user authentication (login/signup)
- Create categories/tags for filtering posts
- Add comments to posts
- Allow users to submit posts from the frontend
- Improve SEO (meta tags, Open Graph)

---

## 📖 Summary

This project demonstrates how to build a clean, professional, and extendable blog using Django. It leverages:
- Django models and ORM
- Views and URL routing
- Template inheritance
- Bootstrap for fast UI styling

This documentation serves as a future reference to understand the structure, logic, and steps involved in building and extending the blog app.

---

